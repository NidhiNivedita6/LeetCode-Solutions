// Java Solution

class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // sort array in decreasing order of profit
        Arrays.sort(arr, (a, b) ->  (b.profit - a.profit));
        
        int max_i = 0;
        for(int i = 0; i < n; i++){
            if(arr[i].deadline > max_i){
                max_i = arr[i].deadline;
            }
        }
        int result[] = new int[max_i + 1];
        for(int i = 1; i <= max_i; i++){
            result[i] = -1;
        }
        int countJob = 0;
        int jobProfit = 0;
        
        for(int i = 0; i < n; i++){
            for(int j = arr[i].deadline; j > 0; j--){
                //free slot found
                if(result[j] == -1){
                    result[j] = i;
                    countJob++;
                    jobProfit += arr[i].profit;
                    break;
                }
            }
        }
        int ans[] = new int[2];
        ans[0]=countJob;
        ans[1]=jobProfit;
        return ans;
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/
